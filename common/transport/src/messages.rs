//! Requests and responses to the Runtime Manager
//!
//! ## Authors
//!
//! The Veracruz Development Team.
//!
//! ## Licensing and copyright notice
//!
//! See the `LICENSE.md` file in the Veracruz root directory for
//! information on licensing and copyright.

use serde::{Deserialize, Serialize};
use crate::session::{EncryptionMode, SessionId};

///////////////////////////////////////////////////////////////////////////////
// Status messages.
///////////////////////////////////////////////////////////////////////////////

/// The Status value returned by the enclave/application for operations.
/// This is intended to be received as a bincode serialized
/// `RootEnclaveMessage::Status`
#[derive(Serialize, Deserialize, Debug)]
pub enum Status {
    /// The operation generating the message succeeded
    Success(String),

    /// The operation generating the message failed
    Fail(String),

    /// The requested operation is not yet implemented
    Unimplemented,
}

///////////////////////////////////////////////////////////////////////////////
// Command-and-control messages.
///////////////////////////////////////////////////////////////////////////////

/// An enumerated type describing request messages.
/// These messages are intended to be serialized using bincode before transport,
/// and deserialized using bincode after transport.
/// Some messages take an optional session ID used by the responder to replay a
/// message to the corresponding endpoint on behalf of the initiator. For
/// instance, `Execute("cmd", Some(0))` asks the responder to execute a remote
/// command onto the endpoint identified by session ID 0.
/// This is acceptable from a security perspective if considering our threat
/// model where the DPU and all the host code interfacing with it are part of
/// the same TCB.
#[derive(Serialize, Deserialize, Debug)]
#[repr(u8)]
pub enum Request {
    /// A request from a relying party, asking the responder to attest another
    /// party, identified by an URL, on behalf of the first relying party.
    /// This effectively turns the responder into a second relying party.
    /// XXX: If we trust the responder, do we have to specify an attestation server?
    /// Parameters:
    /// String - Attestation server's URL
    /// String - Attester's URL
    Attest(String, String),

    /// A request to execute a command on the responder side.
    /// Parameters:
    /// String            - Command
    /// Option<SessionId> - Final endpoint's session ID
    Execute(String, Option<SessionId>),

    /// A request to initialize the responder with the provided policy and
    /// certificate. Not currently used
    /// Parameters:
    /// String       - The policy, in JSON format
    /// Vec<Vec<u8>> - The certificate chain for the enclave
    Initialize(String, Vec<u8>),

    /// Change session's encryption mode
    /// Parameters:
    /// EncryptionMode - Encryption mode
    SetEncryptionMode(EncryptionMode),

    /// Send file to the responder.
    /// Parameters:
    /// String            - File name
    /// Vec<u8>           - Data
    /// Option<SessionId> - Final endpoint's session ID
    UploadFile(String, Vec<u8>, Option<SessionId>),
}

/// An enumerated type describing response messages.
/// These messages are intended to be serialized using bincode before transport,
/// and deserialized using bincode after transport.
#[derive(Serialize, Deserialize, Debug)]
pub enum Response {
    /// A message generated by an operation that did not return data, but did
    /// return a status.  Most operations return data, but if they fail, they
    /// will return a status set to `Status::Fail` (or
    /// `Status::Unimplemented` if it is not implemeneted).  Parameters in
    /// order are:
    /// - The status.
    Status(Status),
}
